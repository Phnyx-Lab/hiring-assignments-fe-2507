openapi: 3.0.0
info:
  title: Frontend 과제 프로젝트 API 명세
  description: 텍스트 스트리밍 및 프로젝트 CRUD 기능을 제공하는 API
  version: 25.07

servers:
  - url: "https://fovgrzavnazdgdoxzzan.supabase.co/functions/v1"
    description: Supabase 기반 Backend 서버

paths:
  /answer:
    post:
      tags:
        - Streaming
      summary: 쿼리에 따른 응답 텍스트 스트리밍
      description: 요청 본문과 상관없이, 서버에 미리 정의된 텍스트를 정해진 간격으로 스트리밍합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
      responses:
        '200':
          description: "성공적인 SSE 스트림 응답. 각 이벤트는 data: {\"text\": \"...\"} 형식의 JSON입니다."
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/AnswerStreamChunk'
        '400':
          description: 잘못된 요청
        '405':
          description: 허용되지 않은 메서드

  /project:
    get:
      tags:
        - Projects
      summary: 모든 프로젝트 목록 조회
      description: 데이터베이스에 저장된 모든 프로젝트의 목록을 반환합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공적인 응답
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: 서버 내부 오류
    post:
      tags:
        - Projects
      summary: 새 프로젝트 생성
      description: 새로운 프로젝트를 생성하고 생성된 프로젝트의 ID를 반환합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNameInput'
      responses:
        '201':
          description: 성공적으로 생성됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: 잘못된 요청
        '500':
          description: 서버 내부 오류
    patch:
      tags:
        - Projects
      summary: 프로젝트 이름 수정
      description: 지정된 ID의 프로젝트 이름을 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateInput'
      responses:
        '200':
          description: 성공적으로 수정됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: 잘못된 요청
        '500':
          description: 서버 내부 오류
    delete:
      tags:
        - Projects
      summary: 프로젝트 삭제
      description: 지정된 ID의 프로젝트를 삭제합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdInput'
      responses:
        '200':
          description: 성공적으로 삭제됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: 잘못된 요청
        '500':
          description: 서버 내부 오류

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
    QueryInput:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          example: "Supabase 엣지 함수에 대해 알려줘."
    ProjectNameInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "새로운 기획 프로젝트"
    ProjectIdInput:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
    ProjectUpdateInput:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
    AnswerStreamChunk:
      type: object
      properties:
        text:
          type: string
          example: "텍스트 조각"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT